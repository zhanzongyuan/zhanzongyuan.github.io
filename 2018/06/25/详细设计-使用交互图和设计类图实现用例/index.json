{"summary":"<h2 id=\"1-设计的核心\"><a href=\"#1-设计的核心\" class=\"headerlink\" title=\"1. 设计的核心\"></a>1. 设计的核心</h2><ul>\n<li>以业务场景为中心</li>\n<li>减少对具体语言实现和技术依赖</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"2-详细设计的方法-BCE-模型\"><a href=\"#2-详细设计的方法-BCE-模型\" class=\"headerlink\" title=\"2. 详细设计的方法 - BCE 模型\"></a>2. 详细设计的方法 - BCE 模型</h2><h3 id=\"2-1-准备\"><a href=\"#2-1-准备\" class=\"headerlink\" title=\"2.1 准备\"></a>2.1 准备</h3><ul>\n<li>用例</li>\n<li>界面原型 与 外部系统接口文档</li>\n<li>领域模型 与 数据库设计（ER 逻辑模型）</li>\n<li>逻辑架构 与 应用程序框架</li>\n</ul>\n<h3 id=\"2-2-识别类\"><a href=\"#2-2-识别类\" class=\"headerlink\" title=\"2.2 识别类\"></a>2.2 识别类</h3><ul>\n<li>Boundary：与外部 Actor 交互的类。包括 UI、外部系统接口</li>\n<li>Controller：处理外部事件，实现控制流的类。通常是一个子系统、一个用例一个类</li>\n<li>Entity：领域对象或数据实体</li>\n</ul>\n<p>其中，UI 类识别比较难，依赖实现技术。传统技术是 window 表示一个 UI，随着 HTML 等多媒体页面表示工具的出现，不同功能的内容在一个界面中共存。</p>\n<h3 id=\"2-3-动态图设计\"><a href=\"#2-3-动态图设计\" class=\"headerlink\" title=\"2.3 动态图设计\"></a>2.3 动态图设计</h3><ul>\n<li>UI类（如业务表单）放最左边，控制器对象放置中间，实体放置右边，外部系统放在最右边<ul>\n<li>使用构造型细化四种类</li>\n<li>Boundary，Controller，Entity，Interface/Boundary</li>\n</ul>\n</li>\n<li>按 BCE 规则实现用例中主要场景<ul>\n<li>Boundary 只能和 Controller 联系，Controller 处理 UI 事件</li>\n<li>Entity 只能和 Controller 联系，Controller 请求 Entity 加工自己或关联的数据<ul>\n<li>即 Entity 提供业务服务，包括简单的 CRUD 资源操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>按 UI 事件顺序，描述 UI 事件被处理的过程</li>\n</ul>\n<h3 id=\"2-4-静态设计\"><a href=\"#2-4-静态设计\" class=\"headerlink\" title=\"2.4 静态设计\"></a>2.4 静态设计</h3><ul>\n<li><p>Boundary 对象（完善界面不在讨论范围内）</p>\n</li>\n<li><p>Controller 对象</p>\n<ul>\n<li>Boundary 发生的用户事件消息，皆是 Controller 的方法。</li>\n<li>以下都是不正确的交互（严格的层次模型）：<ul>\n<li>UI 有箭头指向模型（注意 ViewModel 与 Model 的区别）</li>\n<li>模型有箭头指向控制器。或控制器有除创建之外的箭头指向界面</li>\n<li>无论安卓或web，控制器都设计为多用户。即控制器不包含状态变量</li>\n</ul>\n</li>\n<li>不能考虑多线程，使用多线程更新界面。要使用回调函数（消息）机制完成异步操作</li>\n</ul>\n</li>\n<li><p>Entity 对象</p>\n<ul>\n<li>从 领域模型 获取属性</li>\n<li>如果模型之间存在关联，请将关系转化为合适的实现（关联属性）</li>\n<li>将 Controller 消息转化为方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-5-映射\"><a href=\"#2-5-映射\" class=\"headerlink\" title=\"2.5 映射\"></a>2.5 映射</h3><p>不同架构和框架映射机制不一样，以传统 java web 为例：</p>\n<ul>\n<li>表示层<ul>\n<li>M （ViewModel） 与 用例涉及的 Entities 数据一致， 放入 models 或 pojos 或 entities 包</li>\n<li>V （View） 就是视图模板，或部分视图模板（如查询表单）</li>\n<li>C （Controller） 与 Controller 对象一致，处理一类 UI 事件</li>\n<li>如果模板数据 是 Entities 数据的投影、join，设计为 dto（data transfer object） 对象，放入 dtos 包</li>\n<li>如果一个表达或数据需要在多个界面共享，可设计为应用程序范围或 Session 范围变量，如输入表单，一般放入 form 包</li>\n<li>将常用数据验证方法、翻页等，应写成统一的实用程序包 utilities</li>\n<li>将常用数据转换（序列化、反序列化、格式化）类，放在 converter 包中</li>\n</ul>\n</li>\n<li>业务层（services 包）<ul>\n<li>Entities 的方法</li>\n<li>获取关联对象的方法</li>\n</ul>\n</li>\n<li>数据层（daos 或 repos 包）<ul>\n<li>Entities 的 CRUD 方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-make-reservation-用例的详细设计\"><a href=\"#3-make-reservation-用例的详细设计\" class=\"headerlink\" title=\"3. make reservation 用例的详细设计\"></a>3. make reservation 用例的详细设计</h2><blockquote>\n<p>使用 ECB 实现 make reservation 用例的详细设计（包含用例简介，顺序图，类图）</p>\n</blockquote>\n<h3 id=\"3-1-用例简介\"><a href=\"#3-1-用例简介\" class=\"headerlink\" title=\"3.1 用例简介\"></a>3.1 用例简介</h3><p>用例：make reservation，选择限制查找酒店，选择酒店，选择房间和入住日期，确认预订酒店订单</p>\n<p>用例图：</p>\n<p><img src=\"/2018/06/25/详细设计-使用交互图和设计类图实现用例/Screen Shot 2018-06-29 at 12.18.32 PM.png\" alt=\"Screen Shot 2018-06-29 at 12.17.24 PM\"></p>\n<h3 id=\"3-2-识别类\"><a href=\"#3-2-识别类\" class=\"headerlink\" title=\"3.2 识别类\"></a>3.2 识别类</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Boundary</th>\n<th>Controller</th>\n<th>Entity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 酒店预订搜索页面(SearchPage)<br>2. 酒店房间预订页面(ReservationPage)<br></td>\n<td>1. 后台酒店管理服务(FindHotel)<br>2. 后台订单管理服务(CreateReservation)</td>\n<td>1. 酒店信息(Hotel)<br>2. 预订订单(Reservation)<br>3. 地点(Location)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"3-3-顺序图\"><a href=\"#3-3-顺序图\" class=\"headerlink\" title=\"3.3 顺序图\"></a>3.3 顺序图</h3><p><img src=\"/2018/06/25/详细设计-使用交互图和设计类图实现用例/Screen Shot 2018-07-01 at 8.24.12 PM.png\" alt=\"Screen Shot 2018-07-01 at 8.24.12 PM\"></p>\n<p><br></p>\n<h3 id=\"3-4-类图\"><a href=\"#3-4-类图\" class=\"headerlink\" title=\"3.4 类图\"></a>3.4 类图</h3><p><img src=\"/2018/06/25/详细设计-使用交互图和设计类图实现用例/Screen Shot 2018-07-01 at 8.45.41 PM.png\" alt=\"Screen Shot 2018-07-01 at 8.45.41 PM\"></p>\n<blockquote>\n<p>将逻辑设计类图映射到实际项目框架的包图。用树形结构表述实现的包和类</p>\n</blockquote>\n<h3 id=\"3-5-树状结构\"><a href=\"#3-5-树状结构\" class=\"headerlink\" title=\"3.5 树状结构\"></a>3.5 树状结构</h3><p><img src=\"/2018/06/25/详细设计-使用交互图和设计类图实现用例/Screen Shot 2018-07-01 at 9.17.39 PM.png\" alt=\"Screen Shot 2018-07-01 at 9.17.39 PM\"></p>\n"}