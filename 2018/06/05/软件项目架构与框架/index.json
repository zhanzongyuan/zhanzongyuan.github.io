{"summary":"<p><img src=\"/2018/06/05/软件项目架构与框架/Multi-ties.png\" alt=\"Multi-ties\"></p>\n<p>本文主要探讨Web应用的多层架构</p>\n<a id=\"more\"></a>\n<h2 id=\"1-软件架构与框架之间的区别与联系\"><a href=\"#1-软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"1. 软件架构与框架之间的区别与联系\"></a>1. 软件架构与框架之间的区别与联系</h2><h3 id=\"1-1-概念解释\"><a href=\"#1-1-概念解释\" class=\"headerlink\" title=\"1.1 概念解释\"></a>1.1 概念解释</h3><h4 id=\"1-1-1-架构-Architecture\"><a href=\"#1-1-1-架构-Architecture\" class=\"headerlink\" title=\"1.1.1 架构 (Architecture)\"></a>1.1.1 架构 (Architecture)</h4><blockquote>\n<p>An architecture is the set of significant decisions about the organization of a software system, which describe the selection of the structural elements and their interfaces by which the system is composed，and their behavior as specified in the collaborations among those elements</p>\n</blockquote>\n<p>软件架构描述一个系统的组成元素，元素之间的接口，以及各个元素之间的协作行为，即软件系统的组织架构。</p>\n<h4 id=\"1-1-2-架构模式-Architecture-Styles\"><a href=\"#1-1-2-架构模式-Architecture-Styles\" class=\"headerlink\" title=\"1.1.2 架构模式 (Architecture Styles)\"></a>1.1.2 架构模式 (Architecture Styles)</h4><blockquote>\n<p>An architectural style guides the organization of these elements and their collaborations to solve common problems of the specific domain.</p>\n</blockquote>\n<p>软件架构模式是特定领域的组织解决方案，可以说是架构的特定风格，如信息系统领域的<strong>经典三层架构</strong></p>\n<ul>\n<li>三层架构：<ul>\n<li>表示层（Presentation Layer）<ul>\n<li>Models，Views，Controllers</li>\n<li>State Management</li>\n</ul>\n</li>\n<li>业务层（Business Layer）/服务层（Service Layer）<ul>\n<li>Transacton（交易）</li>\n<li>Query（查询）</li>\n</ul>\n</li>\n<li>数据持久化层（Persistent Layer）/ 数据访问层（Data Access Layer/DAO）<ul>\n<li>CRUD（实体的四种操作）</li>\n<li>ORM（实体与关系映射）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>关于三层架构与MVC：三层架构可以应用于任何语言、任何技术的应用程序；而MVC只是为了解决BS应用程序<strong>表现层</strong>各部分的耦合关系。它们互不冲突，可以同时存在，也可根据情况使用其中一种。MVC 关注的重点在于<strong>表现层</strong>的代码组织方式，通过降低代码间的耦合度，使代码更改维护。</p>\n<p>总之：三层架构是一种宏观的架构模式，应用于整个软件项目。MVC是一种架构模式，一般可以灵活的运用于项目的部分（如前端）。一种架构模式往往使用了多种设计模式</p>\n</blockquote>\n<p>详情见：<a href=\"https://juejin.im/post/593021272f301e0058273468\" target=\"_blank\" rel=\"noopener\">前端开发中的 MVC/MVP/MVVM 模式</a>，<a href=\"http://gad.qq.com/article/detail/16776\" target=\"_blank\" rel=\"noopener\">MVC模式与三层架构的区别</a></p>\n<h4 id=\"1-1-3-应用框架-Application-Frameworks\"><a href=\"#1-1-3-应用框架-Application-Frameworks\" class=\"headerlink\" title=\"1.1.3 应用框架 (Application Frameworks)\"></a>1.1.3 应用框架 (Application Frameworks)</h4><blockquote>\n<p>应用框架是特定语言和应用的架构解决方案。</p>\n</blockquote>\n<p>框架是面向某领域（包括业务领域，如ERP，和计算领域，如GUI）的、可复用的“半成品”软件，它实现了该领域的共性部分，并提供一系列定义良好的可变点以保证灵活性和可扩展性</p>\n<h3 id=\"1-2-架构模式与框架的区别与联系\"><a href=\"#1-2-架构模式与框架的区别与联系\" class=\"headerlink\" title=\"1.2 架构模式与框架的区别与联系\"></a>1.2 架构模式与框架的区别与联系</h3><ul>\n<li><p>区别：框架是一种软件，是由特定语言实现，并应用于特定领域的软件。架构模式不是软件，架构模式是一种思想、风格，是一个抽象的概念。</p>\n</li>\n<li><p>联系：框架是架构模式的解决方案。架构模式是框架应用时的组织思想。</p>\n</li>\n</ul>\n<h2 id=\"2-一个架构模式例子\"><a href=\"#2-一个架构模式例子\" class=\"headerlink\" title=\"2. 一个架构模式例子\"></a>2. 一个架构模式例子</h2><blockquote>\n<p>我们即将描述的系统架构是我的一个Web项目：<a href=\"https://zhidan-system.github.io/Dashboard/\" target=\"_blank\" rel=\"noopener\">知单(Zhidan)智慧餐厅系统</a></p>\n<p>我们的项目采用的是经典的三层架构模式</p>\n</blockquote>\n<p><img src=\"/2018/06/05/软件项目架构与框架/三层架构.png\" alt=\"三层架构\"></p>\n<h2 id=\"3-研究-VUE-与-Flux-状态管理的异同\"><a href=\"#3-研究-VUE-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"3. 研究 VUE 与 Flux 状态管理的异同\"></a>3. 研究 VUE 与 Flux 状态管理的异同</h2><h3 id=\"3-1-概念解释\"><a href=\"#3-1-概念解释\" class=\"headerlink\" title=\"3.1 概念解释\"></a>3.1 概念解释</h3><h4 id=\"3-1-1-Flux\"><a href=\"#3-1-1-Flux\" class=\"headerlink\" title=\"3.1.1 Flux\"></a>3.1.1 Flux</h4><p>简单说，Flux 是一种架构思想，专门解决软件的结构问题。它跟<a href=\"http://www.ruanyifeng.com/blog/2007/11/mvc.html\" target=\"_blank\" rel=\"noopener\">MVC 架构</a>是同一类东西，但是更加<a href=\"http://www.infoq.com/news/2014/05/facebook-mvc-flux\" target=\"_blank\" rel=\"noopener\">简单和清晰</a>。Flux的核心理念是单向数据流。Flux应用有三个主要部分：<strong>Dispatcher调度</strong> 、<strong>存储Store</strong>和<strong>视图View</strong>(React 组件)。</p>\n<p>在这种架构当中，Views 查询 Stores（而不是 Models），并且用户交互将会触发 Actions，Actions 则会被提交到一个集中的 Dispatcher 当中。当 Actions 被派发之后，Stores 将会随之更新自己并且通知 Views 进行修改。这些 Store 当中的修改会进一步促使 Views 查询新的数据。</p>\n<p><img src=\"/2018/06/05/软件项目架构与框架/flux.png\" alt=\"flux\"></p>\n<h4 id=\"3-1-2-Vue\"><a href=\"#3-1-2-Vue\" class=\"headerlink\" title=\"3.1.2 Vue\"></a>3.1.2 Vue</h4><p>Vue是一种前端框架。Vue.js是一套构建用户界面(user interface)的<strong>渐进式框架</strong>。</p>\n<ul>\n<li>Vuex：Vue的状态管理工具</li>\n</ul>\n<p><img src=\"/2018/06/05/软件项目架构与框架/vuex.png\" alt=\"vuex\"></p>\n<h3 id=\"3-2-Vue与Flux状态管理的异同\"><a href=\"#3-2-Vue与Flux状态管理的异同\" class=\"headerlink\" title=\"3.2 Vue与Flux状态管理的异同\"></a>3.2 Vue与Flux状态管理的异同</h3><ol>\n<li><p>Flux是一种架构。Flux主要组成部分是Dispatcher，Store，View，Action。</p>\n</li>\n<li><p>Vue状态管理Vuex是一种工具，Vue中的VueComponent相当于Flux的View。而状态管理工具Vuex主要组成部分是State，Mutations，Action，其中Mutations+State相当于Flux的Store部分。Vuex中还去除了Dispatcher部分。</p>\n</li>\n</ol>\n"}