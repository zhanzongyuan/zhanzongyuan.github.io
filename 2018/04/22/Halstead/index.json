{"summary":"<h2 id=\"1-Halstead\"><a href=\"#1-Halstead\" class=\"headerlink\" title=\"1. Halstead\"></a>1. Halstead</h2><h3 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h3><p>Halstead complexity measures（霍尔斯特德软件复杂度度量方法）是一种软件度量方法。</p>\n<blockquote>\n<p>霍尔斯特德：软件复杂度度量，应该要反映不同的程序语言中算法的实现方式，又要独立于使用的平台语言。这些度量可以由静态代码中的计算而得。</p>\n</blockquote>\n<h3 id=\"1-2-计算\"><a href=\"#1-2-计算\" class=\"headerlink\" title=\"1.2 计算\"></a>1.2 计算</h3><p>Halstead根据语句行的操作符和操作数的数量计算程序复杂度</p>\n<ul>\n<li>操作符和操作数的数量越大，程序结构越复杂<ul>\n<li><strong>操作符</strong>包括语言<strong>保留字</strong>、<strong>程序调用</strong>、<strong>数学运算符</strong>、以及有关<strong>分隔符</strong></li>\n<li><strong>操作数</strong>可以是<strong>常数</strong>和<strong>变量</strong></li>\n</ul>\n</li>\n<li>Halstead复杂度度量<ul>\n<li>设$n_1$表示程序中不同的操作符个数，$n_2$表示不同操作数的个数，$N_1$表示程序中出现的操作符的总数，$N_2$表示程序中出现操作数的总数</li>\n<li>Halstead 程序词汇表长度 Program vacabulary: $n = n_1 + n_2$</li>\n<li>实际Halstead长度 Program length: $N = N_1 + N_2$ </li>\n<li>以N^表示程序的预测长度 Calculated program length: N^ $= n_1 log_2(n_1) + n_2 log_2(n_2) $ </li>\n<li>Halstead的重要结论之一是：程序的时间长度N和预测长度N^非常接近，这表明即时程序还未编写完y呢预先估算出程序的实际长度N</li>\n<li>其他计算公式<ol>\n<li>程序的体积，容量 Volume: $V = (N) log_2(n)$ ，表示程序的词汇复杂度</li>\n<li>程序级别 Level: $\\text {L^} = (2/n_1) \\times (n_2/N_2)$ ，表示程序最紧凑形式的程序量和实际程序量的比，反映程序的效率</li>\n<li>程序难度 Difficult: $D = 1 / \\text {L^}$ ， 表示程序算法的困难程度</li>\n<li>编程工作量 Effort: $ E = V \\times D = V / \\text {L^} $ </li>\n<li>智能级别 $I = \\text {L^} \\times E$ </li>\n<li>语言级别 $ L’ = \\text {L^} \\times \\text {L^} \\times V$</li>\n<li>编程时间(hours) $\\text{T^} = E / (S\\times f), \\ \\ \\  S = 60\\times 60, f = 18$  </li>\n<li>平均语句大小 $N/语句数$</li>\n<li>程序错误预测值 $ B = N \\times log_2 (n_1 + n_2)/3000$ </li>\n</ol>\n</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>仅考虑程序数据量和程序体积，不考虑程序控制流的情况。</li>\n<li>不能从根本上反映程序复杂性。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-Example\"><a href=\"#2-Example\" class=\"headerlink\" title=\"2. Example\"></a>2. Example</h2><ul>\n<li>计算下列程序的 Halstead 复杂度的10项内容</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> a, b, c, mean;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f %f %f\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">    mean = a * b * c;</span><br><span class=\"line\">    mean = <span class=\"built_in\">pow</span>(mean, <span class=\"number\">1.0</span> / <span class=\"number\">3.0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Geometric Mean = %f\"</span>, mean);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>指标</th>\n<th>数值</th>\n<th>项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>不同的操作符个数 $n_1$</td>\n<td>18</td>\n<td><code>#,include, &lt;&gt;, stdio.h, math.h, int, main, (), {}, float, scanf, &amp;, =, *, pow, /, printf, return</code></td>\n</tr>\n<tr>\n<td>不同的操作数个数 $n_2$</td>\n<td>9</td>\n<td><code>a, b, c, mean, &quot;%f %f %f&quot;, 1.0, 3.0, &quot;Geometric Mean = %f&quot;, 0</code></td>\n</tr>\n<tr>\n<td>操作符个数 $N_1$</td>\n<td>28</td>\n<td>-</td>\n</tr>\n<tr>\n<td>操作数个数 $N_2$</td>\n<td>19</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序词汇表长度 $n = n_1 + n_2$</td>\n<td>27</td>\n<td>-</td>\n</tr>\n<tr>\n<td>简单长度 $N = N_1 + N_2$</td>\n<td>47</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序预测长度 $\\text{N^} = n_1log(n_1) + n_2log(n_2)$</td>\n<td>106.389629896</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序的体积，容量 Volume: $V = (N) log_2(n)$</td>\n<td>67.2740969155</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序级别 Level: $\\text {L^} = (2/n_1) \\times (n_2/N_2)$</td>\n<td>0.05263157894</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序难度 Difficult: $D = 1 / \\text {L^}$</td>\n<td>19</td>\n<td>-</td>\n</tr>\n<tr>\n<td>编程工作量 Effort: $ E = V \\times D = V / \\text {L^} $</td>\n<td>1278.13</td>\n<td>-</td>\n</tr>\n<tr>\n<td>智能级别 $I = \\text {L^} \\times E$</td>\n<td>67.2740969155</td>\n<td>-</td>\n</tr>\n<tr>\n<td>语言级别 $ L’ = \\text {L^} \\times \\text {L^} \\times V$</td>\n<td>0.18181696</td>\n<td>-</td>\n</tr>\n<tr>\n<td>编程时间(hours) $\\text{T^} = E / (S\\times f), \\ \\ \\  S = 60\\times 60, f = 18$</td>\n<td>0.01972222222</td>\n<td>-</td>\n</tr>\n<tr>\n<td>平均语句大小=$N/语句数$</td>\n<td>5.222222222</td>\n<td>-</td>\n</tr>\n<tr>\n<td>程序错误预测值 $ B = N \\times log_2 (n_1 + n_2)/3000$</td>\n<td>0.07449323753</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div>\n"}