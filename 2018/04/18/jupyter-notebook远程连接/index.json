{"summary":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><p>在服务器上跑代码是件略微复杂的事情，一般来说有下面两种做法：</p>\n<ol>\n<li>在本地调试完代码后，把本地的代码通过持续集成（CI）或者scp命令或者git的方式远程部署到服务器上。</li>\n<li>直接在远程终端的vim等命令行编辑器编辑远程终端代码，这对于不熟悉vim操作的人来说是不友好的，而且还需要预先安装vim的各种插件以方便编码。</li>\n</ol>\n<p>最近在集群里面跑python的代码的我就想到，能不能把我熟悉的jupyter notebook通过ssh结合起来，转发向远程终端jupyter notebook端口访问的http请求，使得在本地的notebook轻松调试远程终端的代码。</p>\n<h2 id=\"2-基础\"><a href=\"#2-基础\" class=\"headerlink\" title=\"2. 基础\"></a>2. 基础</h2><h3 id=\"2-1-jupyter-notebook\"><a href=\"#2-1-jupyter-notebook\" class=\"headerlink\" title=\"2.1 jupyter notebook\"></a>2.1 jupyter notebook</h3><blockquote>\n<p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.</p>\n<p>Jupyter Notebook是一款开放源代码的Web应用程序，允许您创建和共享包含实时代码，方程式，可视化和叙述文本的文档。用途包括：数据清理和转换，数值模拟，统计建模，数据可视化，机器学习等等。</p>\n</blockquote>\n<ol>\n<li>安装jupyter notebook 这里不做赘述：<a href=\"https://stackoverflow.com/questions/30492623/using-both-python-2-x-and-python-3-x-in-ipython-notebook\" target=\"_blank\" rel=\"noopener\">conda环境安装</a></li>\n<li>运行：<code>jupyter notebook</code> 则会开启一个服务器监听本地的一个端口，同时会产生一个token。如果浏览器访问这个端口则需要输入当前token，则可以进入notebook的界面。</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --no-browser --port=8890  <span class=\"comment\"># 指定无须自动打开浏览器；指定端口8890</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-bash重定向命令\"><a href=\"#2-2-bash重定向命令\" class=\"headerlink\" title=\"2.2 bash重定向命令\"></a>2.2 bash重定向命令</h3><blockquote>\n<p>预先讲解后面可能用到的bash重定向内容</p>\n<p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>\n<ul>\n<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>\n<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>\n<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li>\n</ul>\n<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>\n<p>References: <a href=\"http://www.runoob.com/linux/linux-shell-io-redirections.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/linux-shell-io-redirections.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command1 &gt; file1 <span class=\"comment\"># 将command1产生的打印结果覆盖输出到file1中</span></span><br><span class=\"line\">command1 &gt;&gt; file1 <span class=\"comment\"># 将command1产生的打印结果连接输出到file1中</span></span><br><span class=\"line\">command1 &lt; file1 <span class=\"comment\"># 将file1重定向到command1中，如 cat &lt; file1</span></span><br><span class=\"line\">n &gt;&amp; m <span class=\"comment\"># 将输出文件n和m合并</span></span><br><span class=\"line\"><span class=\"comment\"># 需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写command &gt; file 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-nohup命令\"><a href=\"#2-3-nohup命令\" class=\"headerlink\" title=\"2.3 nohup命令\"></a>2.3 nohup命令</h3><blockquote>\n<p>nohup就是不挂起的意思( not hang up)，该命令可以在你退出帐户/关闭终端之后，使进程忽略hang up信号，继续运行</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup <span class=\"built_in\">command</span>\t<span class=\"comment\"># 将输出重定向到nohup.out文件</span></span><br><span class=\"line\">nohup <span class=\"built_in\">command</span> &amp; <span class=\"comment\"># 加入&amp;放入后台运行</span></span><br><span class=\"line\">nohup <span class=\"built_in\">command</span> &gt;filename 2&gt;&amp;1 &amp; <span class=\"comment\"># 标准输出和错误输出重定位到文件。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-SSH\"><a href=\"#2-4-SSH\" class=\"headerlink\" title=\"2.4 SSH\"></a>2.4 SSH</h3><blockquote>\n<p>SSH 是一种加密协议，用于网络主机之间的远程登录</p>\n<p>SSH协议下的<strong>口令登录</strong>过程：远程主机将自己的公钥发给用户，用户用该公钥加密登录口令，发送给远程主机，远程主机用自己的密钥解密，验证用户登录口令是否正确。（这过程中的信息及时是明文的，被截获了也无法破解）</p>\n<p>还有一种是<strong>公钥登录</strong>：用户本地生成公钥和私钥（生成私钥时可以设置本地口令），然后把公钥给远程主机；当进行用户登录时，远程主机将随机字符发送给用户，用户用私钥加密返回密文给远程主机，如果主机用公钥可以解密得到原来的随机字符，就可以验证用户身份，给予登录权限。</p>\n</blockquote>\n<p>相关命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen <span class=\"comment\"># 生成本地 ~/.ssh 文件夹下的公钥和密钥</span></span><br><span class=\"line\">ssh-copy-id user@host  <span class=\"comment\"># 将公钥发送给远程主机，用于公钥登录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ubuntu启动ssh服务</span></span><br><span class=\"line\">service ssh restart</span><br><span class=\"line\"><span class=\"comment\"># debian启动ssh服务</span></span><br><span class=\"line\">/etc/init.d/ssh restart</span><br><span class=\"line\"></span><br><span class=\"line\">ssh user@host <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub  <span class=\"comment\"># 将本地id_rsa.pub文件里的公钥复制到远程终端中的authorized_keys文件末尾</span></span><br><span class=\"line\"></span><br><span class=\"line\">ssh -L port1:host2:port2 host3  <span class=\"comment\"># host2是相对host3而言，如果host2=127.0.0.1就相当于是host3</span></span><br><span class=\"line\">ssh -N -L 127.0.0.1:8892:127.0.0.1:8892 user@host  <span class=\"comment\"># -N 连接后不进入远程终端。-L 通过第三个服务器转发两个端口之间的数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-SSH远程连接jupyter-notebook\"><a href=\"#3-SSH远程连接jupyter-notebook\" class=\"headerlink\" title=\"3. SSH远程连接jupyter notebook\"></a>3. SSH远程连接jupyter notebook</h2><ol>\n<li>在远程服务器运行：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup jupyter notebook --no-browser --port=34922 &gt; ~/jupyter.txt 2&gt;&amp;1 &amp; <span class=\"comment\"># 后台开启远程服务器的jupyter notebook，并将输出放到jupyter.txt文件里。</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>这时jupyter notebook的服务端口和token就会在jupyter.txt里面，所以将其拷贝到本地</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp user@host:~/jupyter.txt ./  &amp;&amp; cat jupyter.txt <span class=\"comment\"># scp远程拷贝文件到本地，同时显示jupyter.txt的内容</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>在那道jupyter.txt的内容之后，就可以直接创建SSH转发连接（这里假如在34922端口开启的notebook）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -N -L 34922:127.0.0.1:34992 user@host <span class=\"comment\"># ssh转发连接</span></span><br></pre></td></tr></table></figure>\n<p>最后就可以在本地浏览器里粘贴jupyter.txt里面的地址：<a href=\"http://localhost:34992?token=333402uhdixx，在浏览器进入远程终端的notebook。\" target=\"_blank\" rel=\"noopener\">http://localhost:34992?token=333402uhdixx，在浏览器进入远程终端的notebook。</a></p>\n<ul>\n<li>总结<ul>\n<li>尽管过程略微繁琐，但是学到的一些基础知识还是很多的，这里我一般都是写到.sh脚本里面直接运行，所以可能会稍微简化了这个过程</li>\n<li>现在在尝试用更简单的步骤访问，所以有改进肯定会在此更新，敬请期待。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-（续）jupyter-notebook远程访问\"><a href=\"#4-（续）jupyter-notebook远程访问\" class=\"headerlink\" title=\"4. （续）jupyter notebook远程访问\"></a>4. （续）jupyter notebook远程访问</h3><p>之前的ssh连接的方法绕了一个大弯，原因是jupyter notebook启动时候的配置指定本地访问，但是其实可以指定任意ip访问，所以可以直接在外部访问。其次通过修改配置文件，还能修改密码，具体教程就不写了。如下👇</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27339792\" target=\"_blank\" rel=\"noopener\">给jupyter设置密码以能远程访问的方法</a></p>\n<blockquote>\n<p>References:</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html</a></p>\n<p>jupyter ssh远程转发实战：<a href=\"https://blog.csdn.net/yijuan_hw/article/details/68945694\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yijuan_hw/article/details/68945694</a></p>\n</blockquote>\n"}