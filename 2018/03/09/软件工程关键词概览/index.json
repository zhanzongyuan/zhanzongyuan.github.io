{"summary":"<h2 id=\"1-简单题\"><a href=\"#1-简单题\" class=\"headerlink\" title=\"1. 简单题\"></a>1. 简单题</h2><h3 id=\"1-1-软件工程的定义\"><a href=\"#1-1-软件工程的定义\" class=\"headerlink\" title=\"1.1 软件工程的定义\"></a>1.1 软件工程的定义</h3><p>答：</p>\n<ol>\n<li>将系统化、规范化、可度量化应用于软件的开发、运行、维护的过程，即将工程化应用于软件中</li>\n<li>对1中所描述的方法的研究</li>\n</ol>\n<p><br></p>\n<h3 id=\"1-2-阅读经典名著“人月神话”等资料，解释software-crisis、COCOMO模型\"><a href=\"#1-2-阅读经典名著“人月神话”等资料，解释software-crisis、COCOMO模型\" class=\"headerlink\" title=\"1.2 阅读经典名著“人月神话”等资料，解释software crisis、COCOMO模型\"></a>1.2 阅读经典名著“人月神话”等资料，解释software crisis、COCOMO模型</h3><p>答：</p>\n<ol>\n<li>software crisis: </li>\n</ol>\n<p>指落后的软件生产方式无法满足软件日益增长的需求，导致软件开发、运行、维护过程中出现一系列严重问题，主要有如下几种问题</p>\n<ul>\n<li>软件开发的成本日益增长</li>\n<li>软件开发进度难以控制</li>\n<li>用户对”已完成“系统不满意的现象经常发生</li>\n<li>软件产品的质量不可靠</li>\n<li>软件的可维护程度低</li>\n<li>软件开发生产率跟不上硬件的发展和人们需求的增长</li>\n</ul>\n<ol>\n<li>COCOMO模型</li>\n</ol>\n<p>COCOMO模型：结构性成本模型，是一种精确的、易于使用的软件成本估算方法。</p>\n<p>这种模型使用一种基本的回归分析，使用从项目历史和现状中的某些特征作为参数来进行计算。</p>\n<p>可以分为三个层次：</p>\n<ul>\n<li><p>基本COCOMO模型</p>\n<ul>\n<li>基本COCOMO是一种静态的单值模型，它使用以每千源代码行数（KLoC）来度量的程序大小来计算软件开发的工作量（及成本）</li>\n</ul>\n</li>\n<li><p>中级COCOMO模型</p>\n<ul>\n<li>中级COCOMO对软件工作量的估算使用了程度大小以及一组“成本驱动者”，包括对产品、硬件、人员及项目属性的客观评价</li>\n</ul>\n</li>\n<li><p>详细COCOMO模型</p>\n<ul>\n<li>详细的COCOMO整合了中间版本的所有特性，并评估了成本动因对软件工程过程的每个步骤（分析，设计等）的影响。</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"1-3-软件生命周期\"><a href=\"#1-3-软件生命周期\" class=\"headerlink\" title=\"1.3 软件生命周期\"></a>1.3 软件生命周期</h3><p>答：</p>\n<p>把软件的开发、运行、维护过程分段</p>\n<p>4个时期、7个阶段：</p>\n<ol>\n<li>软件分析时期：问题定义、可行性研究、需求分析</li>\n<li>软件设计时期：总体设计、详细设计</li>\n<li>编码与测试时期：编码、测试</li>\n<li>运行与维护时期</li>\n</ol>\n<p><br></p>\n<h3 id=\"1-4-按照SWEBok的KA划分，本课程关注哪些KA或知识领域\"><a href=\"#1-4-按照SWEBok的KA划分，本课程关注哪些KA或知识领域\" class=\"headerlink\" title=\"1.4 按照SWEBok的KA划分，本课程关注哪些KA或知识领域\"></a>1.4 按照SWEBok的KA划分，本课程关注哪些KA或知识领域</h3><p>答：</p>\n<ul>\n<li>软件需求 <a href=\"http://sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide#Software_Requirements\" target=\"_blank\" rel=\"noopener\">Software Requirements</a></li>\n<li>软件设计 <a href=\"http://sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide#Software_Design\" target=\"_blank\" rel=\"noopener\">Software Design</a></li>\n<li>软件构建 <a href=\"http://sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide#Software_Construction\" target=\"_blank\" rel=\"noopener\">Software Construction</a></li>\n<li>软件工程模型和方法 <a href=\"http://sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide#Software_Engineering_Models_and_Methods\" target=\"_blank\" rel=\"noopener\">Software Engineering Models and Methods</a></li>\n</ul>\n<p><br></p>\n<h3 id=\"1-5-解释CMMI的五个级别。例如：Level-1-Initial：无须，自发生产模式\"><a href=\"#1-5-解释CMMI的五个级别。例如：Level-1-Initial：无须，自发生产模式\" class=\"headerlink\" title=\"1.5 解释CMMI的五个级别。例如：Level 1 - Initial：无须，自发生产模式\"></a>1.5 解释CMMI的五个级别。例如：Level 1 - Initial：无须，自发生产模式</h3><p>答：</p>\n<p>Level 1 - Initial 初始级：软件过程是无序的，对过程几乎没有定义，成功与否取决于个人努力，管理是反应式的</p>\n<p>Level 2 - Managed 管理级：开发过建立项目管理过程监督费用、进度和功能特性。制定必要过程纪律，可以重复早些的类似项目成功经理</p>\n<p>Level 3 - Defined 定义级：已经量软件管理和工程两方面的过程文档化、标准化，并综合成组织软件的标准软件过程。所以项目均通过批准的标准软件过程来开发和维护，软件产品的生产在软件开发过程是可见的</p>\n<p>Level 4 - Quantitatively Managed 量化管理级： 分析软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解和控制。管理有一个做出结论的客观依据，管理能够在定量的范围内预测性能</p>\n<p>Level 5 - Optimizing 优化管理级：量化反馈和先进的新思想、新技术促使过程不断改进</p>\n<p><br></p>\n<h3 id=\"1-6-用自己语言简述SWEBok或CMMI（约200字）\"><a href=\"#1-6-用自己语言简述SWEBok或CMMI（约200字）\" class=\"headerlink\" title=\"1.6 用自己语言简述SWEBok或CMMI（约200字）\"></a>1.6 用自己语言简述SWEBok或CMMI（约200字）</h3><p>答：</p>\n<p>SWEBok 指software engineering body of knowledge，即软件工程体系知识</p>\n<p>SWEBok是一个国际标准，定义这个国际标准的目的是为了：定义软件工程标准的内容，促成世界对软件工程的一致观点，定义软件工程的学科领域与其他学科的不同，为软件工程的教材和课程内容提供基础，为软件工程师的认证和授权提供基础</p>\n<p>SWEBok将软件工程体系知识定义为15个KA（knowledge area）知识域，并且为各个知识域定义了详细的内容</p>\n<p>15个知识域可以分为两个方面的内容，一个是软件工程实践知识域，一个是软件工程必备知识基础</p>\n<p><br></p>\n<h2 id=\"2-解释PSP各项指标及技能要求\"><a href=\"#2-解释PSP各项指标及技能要求\" class=\"headerlink\" title=\"2. 解释PSP各项指标及技能要求\"></a>2. 解释PSP各项指标及技能要求</h2><blockquote>\n<ul>\n<li>阅读《现代软件工程》的 PSP: Personal Software Process 章节。 <a href=\"http://www.cnblogs.com/xinz/archive/2011/11/27/2265425.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xinz/archive/2011/11/27/2265425.html</a></li>\n<li>按表格 PSP 2.1， 了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？ （期末考核，每人按开发阶段提交这个表）</li>\n</ul>\n</blockquote>\n<p>答：</p>\n<h3 id=\"2-2-工作内容和所需技能\"><a href=\"#2-2-工作内容和所需技能\" class=\"headerlink\" title=\"2.2 工作内容和所需技能\"></a>2.2 工作内容和所需技能</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>工作内容</th>\n<th>所需技能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>计划</strong></td>\n<td>-</td>\n</tr>\n<tr>\n<td>- 估计这个任务需要多少时间</td>\n<td>多年工作经验，对工作量的合理评估</td>\n</tr>\n<tr>\n<td><strong>开发</strong></td>\n<td>基本编程能力</td>\n</tr>\n<tr>\n<td>- 分析需求</td>\n<td>明确用户需求能力</td>\n</tr>\n<tr>\n<td>- 生成设计文档</td>\n<td>设计软件结构的能力，相关设计工具的使用能力</td>\n</tr>\n<tr>\n<td>- 设计复审 (和同事审核设计文档)</td>\n<td>合作能力，软件设计规范</td>\n</tr>\n<tr>\n<td>- 代码规范 (为目前的开发制定合适的规范)</td>\n<td>契合团队开发代码风格</td>\n</tr>\n<tr>\n<td>- 具体设计</td>\n<td>编码能力</td>\n</tr>\n<tr>\n<td>- 代码复审</td>\n<td></td>\n</tr>\n<tr>\n<td>- 测试（包括自我测试，修改代码，提交修改）</td>\n<td>测试工具的使用能力</td>\n</tr>\n<tr>\n<td><strong>记录时间花费</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>测试报告</strong></td>\n<td>报告编写</td>\n</tr>\n<tr>\n<td><strong>计算工作量</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>事后总结</strong></td>\n<td>自我反省的能力</td>\n</tr>\n<tr>\n<td><strong>提出过程改进计划</strong></td>\n<td>完善自我的能力</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"2-2-怎样做记录\"><a href=\"#2-2-怎样做记录\" class=\"headerlink\" title=\"2.2 怎样做记录\"></a>2.2 怎样做记录</h3><ol>\n<li>新建一个表格文件，作为记录各个工作开始时间的日志</li>\n<li>将上述各项工作填入表中</li>\n<li>每当表中某项任务开始的时候记录开始的时间</li>\n<li>在项目最后统计用时（通过统计每项工作在每天工作时间段中的用时）</li>\n</ol>\n"}