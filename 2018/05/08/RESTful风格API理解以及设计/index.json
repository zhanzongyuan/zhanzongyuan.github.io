{"summary":"<h2 id=\"1-基本理解-RESTful\"><a href=\"#1-基本理解-RESTful\" class=\"headerlink\" title=\"1. 基本理解 - RESTful\"></a>1. 基本理解 - RESTful</h2><ul>\n<li><p>RESTful（representational state transfer）是一种软件架构风格，目的是便于不同的软件或程序在一个网络中互相传递资源。</p>\n</li>\n<li><p>resources：资源。网络上的一个资源就代表一个实体或信息；一个资源可以代表一个图片，一个文件，一种服务；每个资源都有一个URI（统一资源标识符）指向它，每个资源都对应一个特定的URI；获取某个资源的方法，即是访问这个资源的URI即可。<em>URI最常见形式是URL（统一资源定位符）</em></p>\n</li>\n<li>representation：表现层。资源是一种信息实体，对外可以有各种各样的形式表现，比如一段文本可以用html格式、xml格式、txt格式，这些形式就是表现层（明确的说，表现层代表资源实体的表现形式）；URI代表的是一个资源的ID，而没有包含表现层信息，所以表现层的具体表现形式应该是在HTTP请求头部的Accept和Content-Type字段，这两个字段才是对表现层的具体描述</li>\n<li>state transfer：状态转换。客户端和服务端的交互需要改变用户状态，而HTTP协议是无状态的（即对客户端操作得到的状态是无法通过HTTP协议保留的），所以状态都保留在服务端（用户状态的实质就是服务端的数据）。</li>\n</ul>\n<blockquote>\n<p>REST的名称由来</p>\n<p>REST-compliant web services allow the requesting systems to access and manipulate textual representations of <a href=\"https://en.wikipedia.org/wiki/Web_resource\" target=\"_blank\" rel=\"noopener\">web resources</a> by using a uniform and predefined set of <a href=\"https://en.wikipedia.org/wiki/Stateless_protocol\" target=\"_blank\" rel=\"noopener\">stateless</a> operations.</p>\n<p>通过一组统一的、预先定义的无状态操作，REST风格的web服务允许请求系统（客户端）访问和操作文本（html，xml，json。。）表现形式的web资源</p>\n<p>The term is intended to evoke an image of how a well-designed Web application behaves: it is a network of Web resources (a virtual state-machine) where the user progresses through the application by selecting links, such as <code>/user/tom</code>, and operations such as GET or DELETE (state transitions), resulting in the next resource (representing the next state of the application) being transferred to the user for their use.</p>\n<p>该术语旨在唤起设计良好的Web应用程序的行为形象：它是一个Web资源（虚拟状态机）的网络。在这个网络中，用户通过选择链接（例如/ user / tom）和诸如GET或DELETE（状态转换）之类的操作在应用程序中推进，导致下一个资源（表示应用程序的下一个状态）被传送给用户以供其使用。</p>\n</blockquote>\n<h2 id=\"2-设计规范-RESTful-Web-API\"><a href=\"#2-设计规范-RESTful-Web-API\" class=\"headerlink\" title=\"2. 设计规范 - RESTful Web API\"></a>2. 设计规范 - RESTful Web API</h2><blockquote>\n<p>现在web应用最流行的API规范就是REST风格的API，在RESTful Web应用中，实现一个业务流程需要一系列后端的资源状态的转换，每个资源都通过一个URL唯一定位，而操作这些资源的方法就是标准的HTTP方法，通过HTTP方法作用于资源的URL，实现对资源状态的转换，实现Web应用的业务。</p>\n<p>下面内容讨论RESTful Web API的设计规范</p>\n</blockquote>\n<h3 id=\"2-1-通信协议标准\"><a href=\"#2-1-通信协议标准\" class=\"headerlink\" title=\"2.1 通信协议标准\"></a>2.1 通信协议标准</h3><p>HTTPS、HTTP协议</p>\n<h3 id=\"2-2-URL组成规范\"><a href=\"#2-2-URL组成规范\" class=\"headerlink\" title=\"2.2 URL组成规范\"></a>2.2 URL组成规范</h3><blockquote>\n<p>根URL + API版本信息 + URL末端</p>\n</blockquote>\n<h4 id=\"2-2-1-根URL\"><a href=\"#2-2-1-根URL\" class=\"headerlink\" title=\"2.2.1 根URL\"></a>2.2.1 根URL</h4><ol>\n<li>专有API二级域名</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.example.com</span><br></pre></td></tr></table></figure>\n<ol>\n<li>域名下分配一级目录</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/api</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-API版本信息\"><a href=\"#2-2-2-API版本信息\" class=\"headerlink\" title=\"2.2.2 API版本信息\"></a>2.2.2 API版本信息</h4><p>将版本信息加入根URL的下一级路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.example.com/v1</span><br><span class=\"line\">or</span><br><span class=\"line\">https://example.com/api/v1</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-3-URL末端\"><a href=\"#2-2-3-URL末端\" class=\"headerlink\" title=\"2.2.3 URL末端\"></a>2.2.3 URL末端</h4><p>这部分最为重要，这里的URL设计彰显你的资源的分层结构和相互关系</p>\n<p>最终组成的URL指向的是一个资源（Resource）或者一种资源的集合（Collection），URL末尾中不应该出现动词，应该都是名词，同时如果能够返回集合的资源要使用复数形式。</p>\n<p>举个关于用户的例子：</p>\n<p>获取所有用户信息，末端应该设计成 `/users, 即:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.example.com/v1/users</span><br></pre></td></tr></table></figure>\n<p>获取用户编号001的信息，末端应该设计成 <code>/users/001</code>, 即:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.example.com/v1/users/001</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-资源操作规范\"><a href=\"#2-3-资源操作规范\" class=\"headerlink\" title=\"2.3 资源操作规范\"></a>2.3 资源操作规范</h3><ol>\n<li>参考HTTP方法的操作</li>\n</ol>\n<blockquote>\n<p>资源操作基本覆盖CRUD所有操作</p>\n</blockquote>\n<p>HTTP的操作方法在 RESTful 中有各自的语义，理解它们的语义至为重要。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>语义</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>选择、获取</td>\n<td><code>GET /users/001</code></td>\n<td>获取编号 001 用户的信息</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>新建</td>\n<td><code>POST /users</code></td>\n<td>新建一个用户的信息</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>更新(完整)</td>\n<td><code>PUT /users/001</code></td>\n<td>更新编号 001 用户的全部信息，客户端提供该用户的全部信息</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>更新(局部)</td>\n<td><code>PATCH /users/001</code></td>\n<td>更新编号 001 用户的部分信息，客户端只提供该用户的部分信息</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除</td>\n<td><code>DELETE /users/001</code></td>\n<td>删除编号 001用户的信息</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>获取(元数据)</td>\n<td><code>HEAD /users/001</code></td>\n<td>获取编号 001 用户的元数据，如用户数据的哈希值或最后修改时间</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>获取(权限信息)</td>\n<td><code>OPTIONS /users/001</code></td>\n<td>获取客户端能编号 001用户进行哪些操作，即操作的权限</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>在GET请求中通过设置URL末尾中的查询参数，过滤资源‘</p>\n</blockquote>\n<ol>\n<li>参考Google API设计规范（Google的设计思想更贴近资源的CRUD，更符合业务理解）</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Standard Method</th>\n<th>HTTP Mapping</th>\n<th>HTTP Request Body</th>\n<th>HTTP Response Body</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://cloud.google.com/apis/design/standard_methods#list\" target=\"_blank\" rel=\"noopener\"><code>List</code></a></td>\n<td><code>GET &lt;collection URL&gt;</code></td>\n<td>N/A</td>\n<td>Resource* list</td>\n</tr>\n<tr>\n<td><a href=\"https://cloud.google.com/apis/design/standard_methods#get\" target=\"_blank\" rel=\"noopener\"><code>Get</code></a></td>\n<td><code>GET &lt;resource URL&gt;</code></td>\n<td>N/A</td>\n<td>Resource*</td>\n</tr>\n<tr>\n<td><a href=\"https://cloud.google.com/apis/design/standard_methods#create\" target=\"_blank\" rel=\"noopener\"><code>Create</code></a></td>\n<td><code>POST &lt;collection URL&gt;</code></td>\n<td>Resource</td>\n<td>Resource*</td>\n</tr>\n<tr>\n<td><a href=\"https://cloud.google.com/apis/design/standard_methods#update\" target=\"_blank\" rel=\"noopener\"><code>Update</code></a></td>\n<td><code>PUT or PATCH &lt;resource URL&gt;</code></td>\n<td>Resource</td>\n<td>Resource*</td>\n</tr>\n<tr>\n<td><a href=\"https://cloud.google.com/apis/design/standard_methods#delete\" target=\"_blank\" rel=\"noopener\"><code>Delete</code></a></td>\n<td><code>DELETE &lt;resource URL&gt;</code></td>\n<td>N/A</td>\n<td><code>google.protobuf.Empty</code>**</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"2-4-状态码使用规范\"><a href=\"#2-4-状态码使用规范\" class=\"headerlink\" title=\"2.4 状态码使用规范\"></a>2.4 状态码使用规范</h3><p>按照HTTP本身状态码标准，使用状态码。这里列出基本常用情况：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>语义</th>\n<th>HTTP 方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>GET</td>\n<td>成功返回用户请求的数据</td>\n</tr>\n<tr>\n<td>201</td>\n<td>Created</td>\n<td>POST/PUT/PATCH</td>\n<td>用户新建或修改资源成功</td>\n</tr>\n<tr>\n<td>202</td>\n<td>Accepted</td>\n<td>*</td>\n<td>成功发起一个异步任务</td>\n</tr>\n<tr>\n<td>204</td>\n<td>No Content</td>\n<td>DELETE</td>\n<td>删除资源成功</td>\n</tr>\n<tr>\n<td>400</td>\n<td>INVALID REQUEST</td>\n<td>POST/PUT/PATCH</td>\n<td>请求有错误，服务端没有对资源进行任何操作</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized</td>\n<td>*</td>\n<td>表示用户没有权限（令牌、用户名、密码错误）</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>*</td>\n<td>表示用户得到授权（与401错误相对），但是访问是被禁止的</td>\n</tr>\n<tr>\n<td>404</td>\n<td>NOT FOUND</td>\n<td>*</td>\n<td>请求对应的资源不存在</td>\n</tr>\n<tr>\n<td>406</td>\n<td>Not Acceptable</td>\n<td>GET</td>\n<td>用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）, 即未支持的表现层</td>\n</tr>\n<tr>\n<td>410</td>\n<td>Gone</td>\n<td>GET</td>\n<td>用户请求的资源被永久删除，且不会再得到的</td>\n</tr>\n<tr>\n<td>422</td>\n<td>Unprocesable entity</td>\n<td>POST/PUT/PATCH</td>\n<td>当创建一个对象时，发生一个验证错误</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Server Error</td>\n<td>*</td>\n<td>服务器内部错误</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"2-5-错误响应规范\"><a href=\"#2-5-错误响应规范\" class=\"headerlink\" title=\"2.5 错误响应规范\"></a>2.5 错误响应规范</h3><p>如果状态码是4xx，就应该向用户返回出错信息。错误响应的结构如下（参照Google API 设计）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;error&quot;: &#123;</span><br><span class=\"line\">    &quot;code&quot;: 401,</span><br><span class=\"line\">    &quot;message&quot;: &quot;Request had invalid credentials.&quot;,</span><br><span class=\"line\">    &quot;status&quot;: &quot;UNAUTHENTICATED&quot;,</span><br><span class=\"line\">    &quot;details&quot;: [&#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;type.googleapis.com/google.rpc.RetryInfo&quot;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6-返回规范\"><a href=\"#2-6-返回规范\" class=\"headerlink\" title=\"2.6 返回规范\"></a>2.6 返回规范</h3><p>对于不同操作方法和操作对象(集合或个体)，服务器返回的结果应该符合以下规范。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>示例</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>GET /collection</code></td>\n<td>返回资源对象的列表（数组）</td>\n</tr>\n<tr>\n<td><code>GET /collection/resource</code></td>\n<td>返回单个资源对象</td>\n</tr>\n<tr>\n<td><code>POST /collection</code></td>\n<td>返回新生成的资源对象</td>\n</tr>\n<tr>\n<td><code>PUT /collection/resource</code></td>\n<td>返回完整的资源对象</td>\n</tr>\n<tr>\n<td><code>PATCH /collection/resource</code></td>\n<td>返回完整的资源对象</td>\n</tr>\n<tr>\n<td><code>DELETE /collection/resource</code></td>\n<td>返回一个空文档</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>另外，返回的数据格式(Representation)应该尽量使用JSON。</p>\n<h2 id=\"3-设计流程\"><a href=\"#3-设计流程\" class=\"headerlink\" title=\"3. 设计流程\"></a>3. 设计流程</h2><p>如下参考Google API Design</p>\n<blockquote>\n<ol>\n<li><p>Determine what types of resources an API provides.<br>设计API能够提供的资源类型</p>\n</li>\n<li><p>Determine the relationships between resources.</p>\n<p>决定资源之间的关系</p>\n</li>\n<li><p>Decide the resource name schemes based on types and relationships.</p>\n<p>决定资源的类型名基于关系和类型</p>\n</li>\n<li><p>Decide the resource schemas.</p>\n<p>决定资源的纲要</p>\n</li>\n<li><p>Attach minimum set of methods to resources.</p>\n<p>为每个资源添加满足需求的最少操作方法</p>\n</li>\n</ol>\n<p>References: </p>\n<p><a href=\"https://zh.wikipedia.org/wiki/具象状态传输\" target=\"_blank\" rel=\"noopener\">Representational State Transfer</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000008954200\" target=\"_blank\" rel=\"noopener\">理解 RESTful</a></p>\n<p><a href=\"https://codeplanet.io/principles-good-restful-api-design/\" target=\"_blank\" rel=\"noopener\">Principles of good RESTful API Design</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000008938983\" target=\"_blank\" rel=\"noopener\">Google API设计指南－面向资源的设计</a></p>\n<p><a href=\"https://www.infoq.com/articles/designing-restful-http-apps-roth#\" target=\"_blank\" rel=\"noopener\">RESTful HTTP in practice</a></p>\n</blockquote>\n"}