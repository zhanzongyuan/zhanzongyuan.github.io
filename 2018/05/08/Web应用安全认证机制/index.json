{"summary":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>之前对Session/Cookie机制做了仔细的研究：Session/Cookie的提出是为了解决HTTP无状态的问题，为了识别客户端请求是来自哪个客户，同时也记住该客户的状态。</p>\n<p>而在最近做项目的过程中发现一个新的概念：Authentication，即认证的概念。之前对这个概念不是很有兴趣去了解，由于一直把OAuth2.0当作是第三方应用接入Web后台api的认证标准，所以觉得自己可能不需要这方面的学习。但是最近的后端项目中，我仔细研究了RESTful的设计规范之后，发现其实Web应用的认证是很有必要按照一定的权威标准去做的，所以写下了这篇学习总结。</p>\n<p>下面的内容就几种常见的Auth机制做介绍，各个方式的适用场景都是互不相同的。</p>\n<h2 id=\"1-BA-Basic-access-authentication\"><a href=\"#1-BA-Basic-access-authentication\" class=\"headerlink\" title=\"1. BA (Basic access authentication)\"></a>1. BA (Basic access authentication)</h2><blockquote>\n<p>wiki上名词解释：<a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Basic_access_authentication</a></p>\n<p>这是客户端代理的一种方法，每次请求都会带上用户名和密码</p>\n<p>特点是不需要cookie，session，或者login的页面。HTTP头部域有专门区域BA field，用于控制BA。</p>\n</blockquote>\n<p>简单的说就是每次请求都需要加入用户名和密码，每次请求都需要访问数据库验证信息。所以这种方式是效率极低，又不安全的做法。</p>\n<p>在Swagger2.0（一种API框架）中，提供了BA的API书写方式<a href=\"https://swagger.io/docs/specification/2-0/authentication/basic-authentication/\" target=\"_blank\" rel=\"noopener\">https://swagger.io/docs/specification/2-0/authentication/basic-authentication/</a></p>\n<h2 id=\"2-Cookie-Session-Auth\"><a href=\"#2-Cookie-Session-Auth\" class=\"headerlink\" title=\"2. Cookie/Session Auth\"></a>2. Cookie/Session Auth</h2><p>这种认证机制是通过在第一次请求认证的时候，在服务端添加Session，在客户端保留Cookie，之后每次请求通过Cookie信息和Session信息匹配的方式管理状态。</p>\n<p><img src=\"/2018/05/08/Web应用安全认证机制/Session:Cookie.png\" alt=\"Session:Cookie\"></p>\n<h2 id=\"3-OAuth\"><a href=\"#3-OAuth\" class=\"headerlink\" title=\"3. OAuth\"></a>3. OAuth</h2><blockquote>\n<p>OAuth（开放授权）是一个开放的授权标准，允许用户让第三方应用访问该用户在某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。</p>\n<p>OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一个令牌授权一个特定的第三方系统（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息，而非所有内容</p>\n<p>这种基于OAuth的认证机制适用于个人消费者类的互联网产品，如社交类APP等应用，但是不太适合拥有自有认证权限管理的企业应用；</p>\n</blockquote>\n<p><img src=\"/2018/05/08/Web应用安全认证机制/OAuth.png\" alt=\"OAuth\"></p>\n<h2 id=\"4-JWT-Json-Web-Tokens\"><a href=\"#4-JWT-Json-Web-Tokens\" class=\"headerlink\" title=\"4. JWT (Json Web Tokens)\"></a>4. JWT (Json Web Tokens)</h2><p>JWT是一种规范，这个规范允许我们使用JWT在客户端和服务器之间传递安全可靠信息。</p>\n<blockquote>\n<p> 对于Token Auth，Swagger2.0有相关编写规范：<a href=\"https://swagger.io/docs/specification/2-0/authentication/api-keys/\" target=\"_blank\" rel=\"noopener\">https://swagger.io/docs/specification/2-0/authentication/api-keys/</a></p>\n</blockquote>\n<h3 id=\"4-1-JWT组成\"><a href=\"#4-1-JWT组成\" class=\"headerlink\" title=\"4.1 JWT组成\"></a>4.1 JWT组成</h3><p>一个JWT实际上就是一个字符串，它由三部分组成，<strong>头部</strong>、<strong>载荷</strong>与<strong>签名</strong>。</p>\n<ul>\n<li><strong>载荷 Payload</strong></li>\n</ul>\n<p>这个载荷就是相当于将一部分信息（可以是Session信息）用json表示，这部分的内容的字段在JWT标准中可以找到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;iss&quot;: &quot;John Wu JWT&quot;,</span><br><span class=\"line\">    &quot;iat&quot;: 1441593502,</span><br><span class=\"line\">    &quot;exp&quot;: 1441594722,</span><br><span class=\"line\">    &quot;aud&quot;: &quot;www.example.com&quot;,</span><br><span class=\"line\">    &quot;sub&quot;: &quot;jrocket@example.com&quot;,</span><br><span class=\"line\">    &quot;from_user&quot;: &quot;B&quot;,</span><br><span class=\"line\">    &quot;target_user&quot;: &quot;A&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面的前五个字段都是由JWT的标准所定义的。</p>\n<p><code>iss</code>: 该JWT的签发者</p>\n<p><code>sub</code>: 该JWT所面向的用户</p>\n<p><code>aud</code>: 接收该JWT的一方</p>\n<p><code>exp</code>(expires): 什么时候过期，这里是一个Unix时间戳</p>\n<p><code>iat</code>(issued at): 在什么时候签发的</p>\n<p> 然后对这部分做base64编码（这是一种编码方式，不是加密方式，可以重新恢复成原来的编码格式），得到新的字符串如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>头部 Header</strong></li>\n</ul>\n<p>JWT的头部是描述该JWT的基本信息，如描述类型和所用签名算法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;typ&quot;: &quot;JWT&quot;,</span><br><span class=\"line\">  &quot;alg&quot;: &quot;HS256&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对头部做base64编码，就可以得到头部字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>签名 Signature</strong></li>\n</ul>\n<p>将头部字符串和载荷字符串用’.’连接到一起得到下面字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0</span><br></pre></td></tr></table></figure>\n<p>在对其做上面说的HS256签名算法做加密，我们可以为其提供一个加密的密钥，最后加密后得到的字符串就是我们的签名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>JWT</strong></li>\n</ul>\n<p>吧上面的合在一起就是我们的最终JWT</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">头部字符串 + &apos;.&apos; + 载荷字符串 + 签名字符串</span><br></pre></td></tr></table></figure>\n<p>载荷字符串部分用于获取身份信息，签名部分用于验证来源是否合法。</p>\n<blockquote>\n<p>JWT不仅可以用于身份认证，还能用于Web应用直接的通信，和单点登录的实现</p>\n</blockquote>\n<h3 id=\"4-2-JWT做身份认证\"><a href=\"#4-2-JWT做身份认证\" class=\"headerlink\" title=\"4.2 JWT做身份认证\"></a>4.2 JWT做身份认证</h3><ol>\n<li>在做第一次认证的时候，将用户信息用作载荷，产生JWT，返回到客户端（用Cookie形式存储）</li>\n<li>每次请求，检查Cookie：a. 是否过期  b. 身份信息是否合法 c. 签名是否合法。如果通过就说明身份认证成功</li>\n</ol>\n<p><img src=\"/2018/05/08/Web应用安全认证机制/JWT.png\" alt=\"JWT\"></p>\n<h2 id=\"5-微信小程序登录认证与授权\"><a href=\"#5-微信小程序登录认证与授权\" class=\"headerlink\" title=\"5. 微信小程序登录认证与授权\"></a>5. 微信小程序登录认证与授权</h2><p>下面是两个做了详细介绍的链接，有空会去做深入研究。</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html\" target=\"_blank\" rel=\"noopener\">小程序登录</a></p>\n<p><a href=\"https://www.jianshu.com/p/b9384fc7b04b\" target=\"_blank\" rel=\"noopener\">梳理微信小程序登录时序图：授权与 Oauth2.0</a></p>\n<blockquote>\n<p>References:</p>\n<p><a href=\"https://www.jianshu.com/p/88b7be4657a3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/88b7be4657a3</a></p>\n<p><a href=\"http://www.cnblogs.com/xiekeli/p/5607107.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xiekeli/p/5607107.html</a></p>\n<p><a href=\"https://swagger.io/docs/specification/2-0/authentication/\" target=\"_blank\" rel=\"noopener\">https://swagger.io/docs/specification/2-0/authentication/</a></p>\n<p><a href=\"http://blog.leapoahead.com/2015/09/06/understanding-jwt/\" target=\"_blank\" rel=\"noopener\">http://blog.leapoahead.com/2015/09/06/understanding-jwt/</a></p>\n<p><a href=\"http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/\" target=\"_blank\" rel=\"noopener\">http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/</a></p>\n</blockquote>\n"}