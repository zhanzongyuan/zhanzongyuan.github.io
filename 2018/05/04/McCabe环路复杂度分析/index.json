{"summary":"<h2 id=\"1-McCabe复杂度概念\"><a href=\"#1-McCabe复杂度概念\" class=\"headerlink\" title=\"1. McCabe复杂度概念\"></a>1. McCabe复杂度概念</h2><blockquote>\n<p>McCabe 复杂度 (Thomas J. McCabe, Sr., 1976) 方法对程序流程图进行静态分析，将其转化为程序控制流图 CFG (有向图)，然后以图论的方法进行严格的结构分析，是对<strong>程序拓扑结构复杂性</strong>的度量。</p>\n</blockquote>\n<p>以我的理解，McCabe复杂度，是程序控制流图的拓扑结构复杂度，这个过程需要将程序转换成有向图。</p>\n<blockquote>\n<p>进行程序流图的复杂度分析的一个重要基础是流程图的<strong>可规约性</strong>reducibility；一个不使用goto的程序是可规约的，反之是不可规约的。总之进行McCabe复杂度分析要求程序满足结构化程序设计的准则。</p>\n</blockquote>\n<ul>\n<li>McCabe复杂度：<ul>\n<li><strong>环路复杂度</strong></li>\n<li>基本复杂度</li>\n<li>模块设计复杂度</li>\n<li>设计复杂度</li>\n<li>继承复杂度</li>\n<li>行数</li>\n<li>规范化复杂度</li>\n<li>全局数据复杂度</li>\n<li>局部数据复杂度</li>\n<li>病态数据复杂度</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-1-McCabe环路复杂度\"><a href=\"#1-1-McCabe环路复杂度\" class=\"headerlink\" title=\"1.1 McCabe环路复杂度\"></a>1.1 McCabe环路复杂度</h3><ul>\n<li>一个程序模块的环路复杂度用来衡量模块中<strong>判定结构的复杂程度</strong>，数量上可以表现为<strong>程序控制流图中从开始点到终结点的独立路径条数</strong>，相当于合理预防错误所需测试的最少路径条数。<blockquote>\n<p><strong>最大独立路径数目</strong>：独立路径集合指的是从开始点到终结点遍历路径，每次经过的路径必须包含至少一个遍历过的边，最后遍历所有边之后，得到的路径集合就是独立路径集合（集合中两两路径之间一定互相有对方没有存在的边），这样的集合不是固定的，所以这样最大的集合的路径数量就是<strong>最大独立路径数目</strong></p>\n<p>程序的可能错误和高的环路复杂度有着密切的关系，环路复杂度大说明程序代码可能质量低而且难以测试和维护。</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><strong>McCabe环路复杂度计算公式</strong></li>\n</ol>\n<ul>\n<li>$V(G) = m - n + 2p$</li>\n<li>m是G的边数目</li>\n<li>n是G的节点数</li>\n<li>p是G的连通分支数</li>\n</ul>\n<ol>\n<li><strong>其他计算技巧</strong></li>\n</ol>\n<ul>\n<li><p>简单程序流图是连通图，p=1</p>\n</li>\n<li><p>G是平面图时，由欧拉公式，V(G)=R。其中R是平面被控制流图划分成的区域数目 (包括外部面)。</p>\n</li>\n<li><p>简单的单入口单出口结构化模块， V(G) 值等于程序控制流图中的单条件判断节点的个数 +1。多条件判断条件可以先转化为单条件复合结构再应用本结论</p>\n</li>\n<li><p>在程序控制流图G中增加从出口指向入口的<br>辅助边，得到一个强连通图 G’。该程序的环路复杂度定义<br>为图 G’ 的秩数</p>\n</li>\n</ul>\n<ol>\n<li><strong>简单的单入口单出口模块的McCabe环路复杂度等于程序控制流图的最大独立路径数目，它指出为防止出错所需要的最少测试次数，典型应用于白盒测试的基本路径测试方法</strong></li>\n</ol>\n<blockquote>\n<p>其他复杂度内容在这里不做展开</p>\n</blockquote>\n<h2 id=\"2-实例计算McCabe环路复杂度\"><a href=\"#2-实例计算McCabe环路复杂度\" class=\"headerlink\" title=\"2. 实例计算McCabe环路复杂度\"></a>2. 实例计算McCabe环路复杂度</h2><p><img src=\"/2018/05/04/McCabe环路复杂度分析/FlowChart.png\" alt=\"FlowChart\"></p>\n<ol>\n<li>根据上面的程序流程图，完成:</li>\n</ol>\n<p><strong>a. 画出相应的程序控制流图;</strong></p>\n<p><img src=\"/2018/05/04/McCabe环路复杂度分析/控制流图.png\" alt=\"控制流图\"></p>\n<p><strong>b. 给出控制流图的邻接矩阵;</strong></p>\n<script type=\"math/tex; mode=display\">\nM = \n \\begin{bmatrix}\n  0 & 1 & 0 & 0  & 0 & 0\\\\\n  0 & 0 & 1 & 1 & 0 & 0 \\\\\n  0 & 0 & 0 & 1 & 0 & 0 \\\\\n  0 & 0 & 0 & 0 & 1 & 1 \\\\\n  0 & 0 & 0 & 0 & 0 & 1 \\\\\n  0 & 0 & 0 & 0 & 0 & 0 \n \\end{bmatrix}</script><blockquote>\n<p>从左到右，从上到下是A, B, C, D, E, F</p>\n</blockquote>\n<p><strong>c. 计算 McCabe 环形复杂度;</strong></p>\n<p>i. V(G) = m - n + 2p = 7 - 6 + 2 = 3</p>\n<p>ii. V(G) = R (划分区域数) = 3</p>\n<p>iii. V(G) = 判定点节点数+1 = 3</p>\n<p><strong>d. 找出程序的一个独立路径集合。</strong></p>\n<p>(a): A-B-D-E-F</p>\n<p>(b): A-B-D-F</p>\n<p>(c): A-B-C-D-F</p>\n"}